
import numpy as np,cPickle,os

#@profile
def simulate_schechter_distribution( alpha, L_star, L_min, N):
		import numpy as np
		if N==0:
			return np.array([])
		n=0
		output = []
		while n<N:
			if alpha<-.8:
				L = np.random.gamma(scale=L_star, shape=alpha+1, size=10*N) #50
			#elif alpha<-.5:
			#	L = np.random.gamma(scale=L_star, shape=alpha+1, size=2*N) #20
			else:
				L = np.random.gamma(scale=L_star, shape=alpha+1, size=N*2)
			L = L[L>L_min]
			u = np.random.uniform(size=L.size)
			L = L[u<L_min/L]
			output.append(L)
			n+=L.size
		return np.concatenate(output)[:N]


from mpmath import *
mp.dps = 8; mp.pretty = True
#gammainc(-.5,.01)   #This gives alpha=-0.5, L_min=0.01*Lstar


######
#I calculated this:
#fre_ran=np.linspace(30,39,1e5)
#L_prime_freq_conversion=[calc_L_prime(1.,fre) for fre in fre_ran]
#usage:  L_prime_freq_conversion[int((fre-30)/9.0e-5)]
#####



from scipy.stats import gamma,poisson
from scipy import special as sp
def calc_L_prime(sdv,nu_obs):
		z=115.27/nu_obs-1
		from astropy.cosmology import FlatLambdaCDM
		cosmo = FlatLambdaCDM(H0=70, Om0=0.3)
		DL=cosmo.luminosity_distance(z).value
		return 3.25e7*sdv*DL**2/(1+z)**3/nu_obs**2   

likelihood_GN=[{0: np.array([ 0.09330629,  0.08768473,  0.0729927 ,  0.0845225 ,  0.07226355,        0.06071019,  0.05627198,  0.05367561,  0.06916764,  0.06233766,        0.04107981,  0.04528764,  0.04868914,  0.05818674,  0.05431755,        0.04928664,  0.04032258,  0.03584672,  0.03660131,  0.03983516,        0.03448276,  0.03356643,  0.03596127,  0.03211679,  0.02968961,        0.04142857,  0.02425107,  0.02409639,  0.03188406,  0.0286944 ]), 2: np.array([ 0.02434077,  0.01871921,  0.0177268 ,  0.01975851,  0.02231668,        0.02978236,  0.02461899,  0.02450408,  0.01524033,  0.02987013,        0.01525822,  0.02570379,  0.03370787,  0.01623816,  0.02367688,        0.01945525,  0.01747312,  0.01854141,  0.01699346,  0.01236264,        0.00965517,  0.00979021,  0.00691563,  0.02043796,  0.01349528,        0.01428571,  0.00285307,  0.00669344,  0.0057971 ,  0.00430416]), 4: np.array([ 0.02231237,  0.02068966,  0.01876955,  0.03293085,  0.03081828,        0.02290951,  0.01641266,  0.02333722,  0.01289566,  0.01298701,        0.02230047,  0.01591187,  0.01622971,  0.01217862,  0.00696379,        0.00648508,  0.00537634,  0.00865266,  0.00522876,  0.00961538,        0.00689655,  0.00839161,  0.00691563,  0.00729927,  0.00944669,        0.00428571,  0.00285307,  0.00535475,  0.00289855,  0.00573888]), 6: np.array([ 0.01419878,  0.01970443,  0.00834202,  0.01756312,  0.01062699,        0.01145475,  0.007034  ,  0.01516919,  0.00586166,  0.01168831,        0.01408451,  0.00367197,  0.00873908,  0.00405954,  0.00417827,        0.00389105,  0.00134409,  0.00247219,  0.00130719,  0.        ,        0.00137931,  0.0027972 ,  0.00138313,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.00144928,  0.        ]), 8: np.array([ 0.02028398,  0.02857143,  0.0198123 ,  0.01536773,  0.01700319,        0.01603666,  0.014068  ,  0.01050175,  0.007034  ,  0.00779221,        0.00586854,  0.00367197,  0.00749064,  0.        ,  0.00278552,        0.00259403,  0.00268817,  0.00123609,  0.        ,  0.00274725,        0.00137931,  0.        ,  0.00138313,  0.00145985,  0.        ,        0.00285714,  0.        ,  0.        ,  0.        ,  0.        ]), 10: np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,        0.,  0.,  0.,  0.]), -1: np.array([ 0.82555781,  0.82463054,  0.86235662,  0.8298573 ,  0.84697131,        0.85910653,  0.88159437,  0.87281214,  0.8898007 ,  0.87532468,        0.90140845,  0.90575275,  0.88514357,  0.90933694,  0.90807799,        0.91828794,  0.9327957 ,  0.93325093,  0.93986928,  0.93543956,        0.9462069 ,  0.94545455,  0.94744122,  0.93868613,  0.94736842,        0.93714286,  0.9700428 ,  0.96385542,  0.95797101,  0.96126255])}, {0: np.array([ 0.27771011,  0.29776675,  0.26481959,  0.29480519,  0.33311897,        0.32868109,  0.33215046,  0.35029499,  0.36886503,  0.37442922,        0.4183359 ,  0.40722892,  0.43811075,  0.444     ,  0.43187448,        0.46302521,  0.49094047,  0.48367167,  0.50131926,  0.49537893,        0.49516271,  0.52730375,  0.52466368,  0.51772388,  0.50790698,        0.53093259,  0.55185538,  0.56526006,  0.54069767,  0.55304348]), 2: np.array([ 0.07551766,  0.07878412,  0.08634021,  0.08766234,  0.10289389,        0.12072575,  0.11213627,  0.12610619,  0.13496933,  0.14079148,        0.14329738,  0.15502008,  0.15065147,  0.1672    ,  0.16350124,        0.15966387,  0.1484038 ,  0.16681377,  0.17766051,  0.20887246,        0.18645558,  0.18088737,  0.19372197,  0.21641791,  0.22604651,        0.2179132 ,  0.19980971,  0.22865554,  0.22286822,  0.22434783]), 4: np.array([ 0.06577345,  0.06575682,  0.08311856,  0.08701299,  0.07717042,        0.07676204,  0.08516678,  0.08923304,  0.08742331,  0.09589041,        0.08397535,  0.10200803,  0.1009772 ,  0.0928    ,  0.10817506,        0.09243697,  0.10181191,  0.10326567,  0.10290237,  0.10166359,        0.1055409 ,  0.10665529,  0.09058296,  0.08675373,  0.10604651,        0.09602955,  0.0980019 ,  0.09813543,  0.1124031 ,  0.09478261]), 6: np.array([ 0.03775883,  0.03101737,  0.0431701 ,  0.03701299,  0.04501608,        0.03977669,  0.04542229,  0.03097345,  0.04141104,  0.03272451,        0.03389831,  0.03614458,  0.03664495,  0.028     ,  0.02642444,        0.02352941,  0.03019845,  0.02559576,  0.02550572,  0.02218115,        0.01671064,  0.02047782,  0.02242152,  0.01958955,  0.01116279,        0.0212373 ,  0.01712655,  0.00981354,  0.01065891,  0.01217391]), 8: np.array([ 0.04506699,  0.03908189,  0.03801546,  0.03766234,  0.03022508,        0.03070482,  0.03335699,  0.03023599,  0.02377301,  0.01978691,        0.01540832,  0.01526104,  0.01465798,  0.0112    ,  0.01734104,        0.01260504,  0.00776531,  0.00441306,  0.00703606,  0.00462107,        0.00527704,  0.00682594,  0.0044843 ,  0.00373134,  0.00186047,        0.00369344,  0.0076118 ,  0.00196271,  0.00193798,  0.00173913]), 10: np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,        0.,  0.,  0.,  0.]), -1: np.array([ 0.49817296,  0.48759305,  0.48453608,  0.45584416,  0.41157556,        0.40334962,  0.39176721,  0.37315634,  0.34355828,  0.33637747,        0.30508475,  0.28433735,  0.25895765,  0.2568    ,  0.25268373,        0.2487395 ,  0.22088007,  0.21624007,  0.18557608,  0.16728281,        0.19085312,  0.15784983,  0.16412556,  0.15578358,  0.14697674,        0.13019391,  0.12559467,  0.09617272,  0.11143411,  0.11391304])}, {0: np.array([ 0.2814992 ,  0.29677981,  0.28227961,  0.30528284,  0.29686723,        0.2814852 ,  0.2789891 ,  0.283029  ,  0.27429806,  0.27598356,        0.27618523,  0.26932224,  0.24156306,  0.24657534,  0.23573668,        0.22229299,  0.17682518,  0.1911958 ,  0.19047619,  0.17921897,        0.15952214,  0.16232877,  0.14817518,  0.15571429,  0.16216216,        0.13965268,  0.1244204 ,  0.1188755 ,  0.10981308,  0.11893204]), 2: np.array([ 0.07416268,  0.10226284,  0.09928762,  0.1028518 ,  0.12083541,        0.11389865,  0.13875124,  0.12728249,  0.1425486 ,  0.13094539,        0.14057332,  0.14387634,  0.13854352,  0.13996426,  0.14231975,        0.13503185,  0.16141996,  0.16162943,  0.14486922,  0.14923291,        0.14546732,  0.1630137 ,  0.15766423,  0.15285714,  0.13438438,        0.14327062,  0.15378671,  0.14779116,  0.13707165,  0.13187702]), 4: np.array([ 0.09888357,  0.1105309 ,  0.12422084,  0.13277232,  0.14420686,        0.16557953,  0.16352825,  0.18045113,  0.1862851 ,  0.1902525 ,        0.20672547,  0.20808561,  0.23445826,  0.2173913 ,  0.22633229,        0.2566879 ,  0.24246484,  0.26149803,  0.27967807,  0.27336123,        0.28812368,  0.28013699,  0.29927007,  0.295     ,  0.3003003 ,        0.31620839,  0.31993818,  0.33654618,  0.3364486 ,  0.3066343 ]), 6: np.array([ 0.09250399,  0.09704091,  0.10596616,  0.11594203,  0.11785182,        0.14249875,  0.14172448,  0.14930183,  0.16144708,  0.17615972,        0.1890849 ,  0.18370987,  0.19301362,  0.21203097,  0.20501567,        0.22101911,  0.22973878,  0.23653088,  0.23474178,  0.24755927,        0.25087843,  0.25821918,  0.25839416,  0.26071429,  0.27552553,        0.28654124,  0.27511592,  0.28273092,  0.30607477,  0.31148867]), 8: np.array([ 0.14114833,  0.1362054 ,  0.15048976,  0.1430575 ,  0.16260567,        0.15153036,  0.15213082,  0.16595059,  0.16468683,  0.15502055,        0.13175303,  0.15517241,  0.15808171,  0.15128052,  0.16865204,        0.15095541,  0.17347622,  0.13863338,  0.14218645,  0.14365411,        0.15319747,  0.13219178,  0.13284672,  0.13357143,  0.12537538,        0.1121563 ,  0.1251932 ,  0.1124498 ,  0.1105919 ,  0.12864078]), 10: np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,        0.,  0.,  0.,  0.]), -1: np.array([ 0.31180223,  0.25718016,  0.23775601,  0.2000935 ,  0.15763302,        0.14500753,  0.12487611,  0.09398496,  0.07073434,  0.07163829,        0.05567806,  0.03983353,  0.03433985,  0.03275759,  0.02194357,        0.01401274,  0.01607502,  0.01051248,  0.00804829,  0.0069735 ,        0.00281096,  0.00410959,  0.00364964,  0.00214286,  0.00225225,        0.00217077,  0.0015456 ,  0.00160643,  0.        ,  0.00242718])}]
likelihood_freq_GN=[{8: np.array([ 0.25946445,  0.26428571,  0.29852941,  0.30651945,  0.329653  ,        0.3012318 ,  0.32106455,  0.32224771,  0.35070258,  0.35572617,        0.37245509,  0.3793329 ,  0.40292807,  0.37597403,  0.39323467,        0.40472879,  0.41369672,  0.4297933 ,  0.40611354,  0.43053435,        0.41679389,  0.44233687,  0.46589018,  0.4533437 ,  0.45409429,        0.45148356,  0.4733388 ,  0.47411668,  0.46985816,  0.48617886]), 12: np.array([ 0.07848569,  0.07619048,  0.07843137,  0.07728707,  0.06572029,        0.07558791,  0.07531144,  0.06938073,  0.06557377,  0.06206014,        0.05568862,  0.05101373,  0.04710376,  0.0525974 ,  0.04933051,        0.04381085,  0.03913347,  0.04347826,  0.04585153,  0.03587786,        0.04274809,  0.03566009,  0.02579035,  0.02332815,  0.02812242,        0.02726544,  0.02461034,  0.0230074 ,  0.0212766 ,  0.01869919]), 4: np.array([ 0.56694367,  0.56571429,  0.54362745,  0.53259727,  0.54574132,        0.55207167,  0.54416761,  0.54988532,  0.53454333,  0.53678823,        0.53113772,  0.53891432,  0.51877785,  0.53961039,  0.54052149,        0.52920723,  0.52480783,  0.50962224,  0.53056769,  0.52061069,        0.53129771,  0.51820941,  0.49750416,  0.51866252,  0.51116625,        0.51403368,  0.49384742,  0.49712408,  0.50620567,  0.49186992]), 16: np.array([ 0.04524469,  0.0452381 ,  0.03137255,  0.03417455,  0.02471083,        0.03303471,  0.02718007,  0.02522936,  0.02751756,  0.02111324,        0.0257485 ,  0.01569653,  0.01909612,  0.01688312,  0.01057082,        0.01182197,  0.00978337,  0.0085531 ,  0.01091703,  0.00763359,        0.00610687,  0.00227618,  0.00748752,  0.00311042,  0.00661704,        0.00400962,  0.00492207,  0.00246508,  0.00088652,  0.00162602]), 20: np.array([ 0.0498615 ,  0.04857143,  0.04803922,  0.04942166,  0.03417455,        0.03807391,  0.03227633,  0.03325688,  0.02166276,  0.02431222,        0.01497006,  0.01504251,  0.01209421,  0.01493506,  0.00634249,        0.01043115,  0.01257862,  0.0085531 ,  0.00655022,  0.00534351,        0.00305344,  0.00151745,  0.00332779,  0.00155521,  0.        ,        0.0032077 ,  0.00328138,  0.00328677,  0.00177305,  0.00162602])}, {8: np.array([ 0.24150485,  0.24410453,  0.26599327,  0.28473177,  0.28120617,        0.27960057,  0.29761043,  0.27003891,  0.33127413,  0.29377104,        0.3168    ,  0.29444891,  0.3221831 ,  0.33973799,  0.31818182,        0.31374244,  0.33918669,  0.33179724,  0.30979284,  0.30317164,        0.29915334,  0.29928952,  0.29813084,  0.30566406,  0.32038835,        0.29054726,  0.29431072,  0.29678068,  0.26536885,  0.26961771]), 12: np.array([ 0.1711165 ,  0.21287444,  0.22154882,  0.22764787,  0.25525947,        0.2596291 ,  0.28819696,  0.29961089,  0.27644788,  0.32407407,        0.3376    ,  0.34191472,  0.34771127,  0.32925764,  0.36538462,        0.38461538,  0.38170055,  0.38064516,  0.42278719,  0.42817164,        0.41862653,  0.43339254,  0.46168224,  0.45800781,  0.45242718,        0.48258706,  0.49781182,  0.4889336 ,  0.5102459 ,  0.52716298]), 4: np.array([ 0.33373786,  0.29955386,  0.27138047,  0.24621733,  0.22931276,        0.20399429,  0.17378711,  0.18599222,  0.15444015,  0.14309764,        0.1248    ,  0.12469831,  0.10211268,  0.09956332,  0.06643357,        0.08470182,  0.05083179,  0.05806452,  0.05461394,  0.04197761,        0.04139229,  0.03730018,  0.03738318,  0.03125   ,  0.02524272,        0.01890547,  0.0131291 ,  0.01408451,  0.0204918 ,  0.01408451]), 16: np.array([ 0.09830097,  0.11472275,  0.10639731,  0.12448418,  0.11991585,        0.12482168,  0.12454743,  0.12529183,  0.13590734,  0.14225589,        0.1392    ,  0.14320193,  0.1346831 ,  0.14759825,  0.16083916,        0.13310285,  0.15526802,  0.159447  ,  0.14689266,  0.15858209,        0.16839135,  0.169627  ,  0.1411215 ,  0.15234375,  0.14660194,        0.16218905,  0.14770241,  0.1639839 ,  0.16495902,  0.15291751]), 20: np.array([ 0.15533981,  0.12874442,  0.13468013,  0.11691884,  0.11430575,        0.13195435,  0.11585807,  0.11906615,  0.1019305 ,  0.09680135,        0.0816    ,  0.09573612,  0.09330986,  0.08384279,  0.08916084,        0.08383751,  0.07301294,  0.07004608,  0.06591337,  0.06809701,        0.0724365 ,  0.06039076,  0.06168224,  0.05273438,  0.05533981,        0.04577114,  0.04704595,  0.0362173 ,  0.03893443,  0.0362173 ])}, {8: np.array([ 0.14674735,  0.16082803,  0.15178571,  0.16045381,  0.15012723,        0.14581458,  0.14298323,  0.13097514,  0.13021869,  0.13899614,        0.11781609,  0.11111111,  0.10979228,  0.12004069,  0.1144641 ,        0.08760684,  0.0815402 ,  0.07069672,  0.07628004,  0.07540603,        0.06798246,  0.05980066,  0.06623932,  0.03896104,  0.05170517,        0.0558598 ,  0.04381161,  0.05125   ,  0.03658537,  0.03259604]), 12: np.array([ 0.14977307,  0.14649682,  0.15909091,  0.17828201,  0.19592875,        0.19261926,  0.2109444 ,  0.1873805 ,  0.2027833 ,  0.21621622,        0.22796935,  0.22736626,  0.20375865,  0.22482197,  0.20083247,        0.20405983,  0.21291053,  0.22131148,  0.23824451,  0.21461717,        0.19627193,  0.21816168,  0.21153846,  0.2231405 ,  0.20682068,        0.21796276,  0.19934283,  0.22125   ,  0.17738359,  0.18859139]), 4: np.array([ 0.29500756,  0.23726115,  0.20616883,  0.17504052,  0.16624258,        0.14671467,  0.12444837,  0.11950287,  0.09741551,  0.08108108,        0.06704981,  0.07407407,  0.05242334,  0.03763988,  0.03746098,        0.03205128,  0.02718007,  0.03278689,  0.01776385,  0.01856148,        0.01096491,  0.00996678,  0.0042735 ,  0.00354191,  0.00880088,        0.00438116,  0.00328587,  0.00625   ,  0.00110865,  0.00349243]), 16: np.array([ 0.13918306,  0.15684713,  0.17126623,  0.17828201,  0.17557252,        0.18631863,  0.2321271 ,  0.22753346,  0.23359841,  0.22104247,        0.25766284,  0.25925926,  0.24826904,  0.2706002 ,  0.27263267,        0.30235043,  0.30124575,  0.3227459 ,  0.30094044,  0.30510441,        0.33333333,  0.33887043,  0.33333333,  0.36953955,  0.35423542,        0.36254107,  0.33844469,  0.37875   ,  0.38802661,  0.38416764]), 20: np.array([ 0.26928896,  0.29856688,  0.31168831,  0.30794165,  0.31212892,        0.32853285,  0.28949691,  0.33460803,  0.3359841 ,  0.34266409,        0.32950192,  0.3281893 ,  0.38575668,  0.34689725,  0.37460978,        0.37393162,  0.37712344,  0.35245902,  0.36677116,  0.3863109 ,        0.39144737,  0.37320044,  0.38461538,  0.364817  ,  0.37843784,        0.3592552 ,  0.41511501,  0.3425    ,  0.39689579,  0.3911525 ])}]
lognorm_params_given_inj_and_meas_GN=np.array([[[-0.15532854,  0.3081471 ],        [-0.56879757,  0.42293322],        [-0.60259929,  0.54312181]],       [[ 0.56541749,  0.51603103],        [ 0.03738154,  0.37771326],        [-0.21141726,  0.38215461]],       [[ 0.77751389,  0.38621917],        [ 0.24934391,  0.3448871 ],        [-0.09490425,  0.32869319]],       [[ 0.98324971,  0.37594119],        [ 0.47571879,  0.34589916],        [ 0.03399349,  0.33079401]],       [[ 1.4052255 ,  0.53310181],        [ 0.76159231,  0.38782203],        [ 0.23384574,  0.3158178 ]],       [[ 1.69113277,  0.41793205],        [ 1.18133577,  0.47560867],        [ 0.57053751,  0.37575988]]])


likelihood_COS=[{0: np.array([ 0.06818182,  0.09122807,  0.08333333,  0.10358566,  0.09589041,        0.09363296,  0.09061489,  0.08805031,  0.09022556,  0.08099688,        0.10175439,  0.1015873 ,  0.07911392,  0.10367893,  0.08099688,        0.06730769,  0.10574018,  0.08910891,  0.06862745,  0.08614232,        0.05333333,  0.0704698 ,  0.0794702 ,  0.0764526 ,  0.07643312,        0.0530303 ,  0.04895105,  0.06862745,  0.0794702 ,  0.0620438 ]), 2: np.array([ 0.03030303,  0.03508772,  0.01893939,  0.02788845,  0.02054795,        0.04868914,  0.03559871,  0.02201258,  0.02255639,  0.02803738,        0.02807018,  0.01904762,  0.02848101,  0.00668896,  0.01869159,        0.0224359 ,  0.02416918,  0.01650165,  0.02287582,  0.01123596,        0.01333333,  0.0033557 ,  0.00662252,  0.01834862,  0.00318471,        0.01136364,  0.01048951,  0.00980392,  0.00662252,  0.00729927]), 4: np.array([ 0.01515152,  0.01052632,  0.02272727,  0.01195219,  0.01369863,        0.00749064,  0.00970874,  0.02201258,  0.0037594 ,  0.00623053,        0.01052632,  0.01269841,  0.00632911,  0.00334448,  0.        ,        0.00320513,  0.00302115,  0.00330033,  0.        ,  0.        ,        0.00333333,  0.        ,  0.        ,  0.        ,  0.        ,        0.00378788,  0.        ,  0.        ,  0.        ,  0.        ]), 6: np.array([ 0.        ,  0.        ,  0.00378788,  0.00398406,  0.        ,        0.00374532,  0.00647249,  0.00314465,  0.        ,  0.00623053,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ]), 8: np.array([ 0.01515152,  0.        ,  0.        ,  0.        ,  0.        ,        0.00374532,  0.        ,  0.        ,  0.0037594 ,  0.        ,        0.        ,  0.0031746 ,  0.        ,  0.        ,  0.00311526,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ]), 10: np.array([ 0.        ,  0.        ,  0.00378788,  0.        ,  0.        ,        0.00749064,  0.00323625,  0.        ,  0.        ,  0.        ,        0.        ,  0.0031746 ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ]), 12: np.array([ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.0075188 ,  0.00311526,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.00320513,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ]), -1: np.array([ 0.87121212,  0.86315789,  0.86742424,  0.85258964,  0.86986301,        0.83520599,  0.85436893,  0.86477987,  0.87218045,  0.87538941,        0.85964912,  0.86031746,  0.88607595,  0.88628763,  0.89719626,        0.90384615,  0.86706949,  0.89108911,  0.90849673,  0.90262172,        0.93      ,  0.9261745 ,  0.91390728,  0.90519878,  0.92038217,        0.93181818,  0.94055944,  0.92156863,  0.91390728,  0.93065693])}, {0: np.array([ 0.17791411,  0.14939024,  0.18495298,  0.1882716 ,  0.21971831,        0.17142857,  0.2247191 ,  0.20738636,  0.20474777,  0.19788918,        0.18292683,  0.25617284,  0.22254335,  0.18767507,  0.25465839,        0.22408964,  0.24850299,  0.25595238,  0.24783862,  0.24561404,        0.25846154,  0.23809524,  0.21118012,  0.25153374,  0.22155689,        0.24414716,  0.21682848,  0.2875817 ,  0.21921922,  0.21405751]), 2: np.array([ 0.09815951,  0.18902439,  0.18808777,  0.16049383,  0.14084507,        0.21587302,  0.19101124,  0.21022727,  0.25816024,  0.2348285 ,        0.25      ,  0.25925926,  0.27456647,  0.26610644,  0.30124224,        0.38095238,  0.30538922,  0.32738095,  0.38904899,  0.35672515,        0.32615385,  0.39115646,  0.41925466,  0.40797546,  0.39820359,        0.41471572,  0.40453074,  0.35947712,  0.42942943,  0.45047923]), 4: np.array([ 0.10429448,  0.10670732,  0.10031348,  0.12345679,  0.16338028,        0.13333333,  0.15730337,  0.17897727,  0.17507418,  0.17150396,        0.20731707,  0.17592593,  0.20231214,  0.21288515,  0.20186335,        0.18487395,  0.20359281,  0.19940476,  0.17867435,  0.23099415,        0.19384615,  0.21768707,  0.24534161,  0.20552147,  0.25449102,        0.22073579,  0.27831715,  0.26797386,  0.23723724,  0.2715655 ]), 6: np.array([ 0.06748466,  0.03658537,  0.05015674,  0.0462963 ,  0.03380282,        0.04126984,  0.04213483,  0.04829545,  0.02967359,  0.06860158,        0.05792683,  0.0617284 ,  0.03179191,  0.06162465,  0.04037267,        0.04761905,  0.04491018,  0.04761905,  0.04034582,  0.04093567,        0.05230769,  0.04421769,  0.03726708,  0.03067485,  0.03892216,        0.04013378,  0.03236246,  0.00980392,  0.02702703,  0.01277955]), 8: np.array([ 0.        ,  0.00304878,  0.01253918,  0.00925926,  0.0084507 ,        0.01269841,  0.00842697,  0.00852273,  0.01186944,  0.01055409,        0.00914634,  0.01234568,  0.00289017,  0.00280112,  0.00931677,        0.00840336,  0.        ,  0.        ,  0.        ,  0.00292398,        0.00307692,  0.        ,  0.        ,  0.00306748,  0.        ,        0.00668896,  0.00323625,  0.00326797,  0.003003  ,  0.        ]), 10: np.array([ 0.        ,  0.00304878,  0.        ,  0.00308642,  0.        ,        0.0031746 ,  0.00561798,  0.        ,  0.        ,  0.        ,        0.00304878,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.00288184,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ]), 12: np.array([ 0.00613497,  0.        ,  0.        ,  0.00308642,  0.0028169 ,        0.01269841,  0.        ,  0.00284091,  0.00296736,  0.00527704,        0.        ,  0.00308642,  0.00867052,  0.        ,  0.        ,        0.00560224,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ]), -1: np.array([ 0.54601227,  0.51219512,  0.46394984,  0.46604938,  0.43098592,        0.40952381,  0.37078652,  0.34375   ,  0.31750742,  0.31134565,        0.28963415,  0.23148148,  0.25722543,  0.26890756,  0.19254658,        0.14845938,  0.19760479,  0.16964286,  0.14121037,  0.12280702,        0.16615385,  0.10884354,  0.08695652,  0.10122699,  0.08682635,        0.0735786 ,  0.06472492,  0.07189542,  0.08408408,  0.05111821])}, {0: np.array([ 0.112     ,  0.16793893,  0.13553114,  0.12982456,  0.12080537,        0.13793103,  0.1369863 ,  0.15882353,  0.140625  ,  0.16774194,        0.11854103,  0.11075949,  0.14649682,  0.11143695,  0.09698997,        0.10903427,  0.08813559,  0.09602649,  0.10163934,  0.08860759,        0.08250825,  0.06557377,  0.0819209 ,  0.07692308,  0.05590062,        0.0735786 ,  0.04823151,  0.06506849,  0.06338028,  0.0625    ]), 2: np.array([ 0.128     ,  0.13740458,  0.14285714,  0.16491228,  0.17785235,        0.14106583,  0.08561644,  0.15294118,  0.15625   ,  0.1483871 ,        0.17021277,  0.18670886,  0.14649682,  0.12316716,  0.19063545,        0.14641745,  0.15932203,  0.14238411,  0.16065574,  0.17088608,        0.17821782,  0.10819672,  0.17514124,  0.13905325,  0.1552795 ,        0.15384615,  0.1511254 ,  0.14726027,  0.11971831,  0.16911765]), 4: np.array([ 0.088     ,  0.13740458,  0.17948718,  0.18596491,  0.15771812,        0.17554859,  0.19178082,  0.21764706,  0.21875   ,  0.20322581,        0.22796353,  0.26265823,  0.27070064,  0.30205279,  0.23076923,        0.2834891 ,  0.29830508,  0.30463576,  0.26557377,  0.33860759,        0.30033003,  0.37377049,  0.29943503,  0.38461538,  0.37267081,        0.36789298,  0.33440514,  0.35273973,  0.37676056,  0.36764706]), 6: np.array([ 0.08      ,  0.11068702,  0.0952381 ,  0.09824561,  0.11409396,        0.13793103,  0.16438356,  0.15      ,  0.19375   ,  0.22258065,        0.20972644,  0.1835443 ,  0.21974522,  0.228739  ,  0.2909699 ,        0.26168224,  0.2779661 ,  0.27152318,  0.30819672,  0.27848101,        0.32343234,  0.30819672,  0.29661017,  0.29881657,  0.31987578,        0.31772575,  0.34405145,  0.35616438,  0.35211268,  0.3125    ]), 8: np.array([ 0.064     ,  0.04580153,  0.03296703,  0.05964912,  0.05033557,        0.06896552,  0.08561644,  0.09411765,  0.05      ,  0.06129032,        0.10334347,  0.09177215,  0.06687898,  0.08504399,  0.04347826,        0.08411215,  0.08135593,  0.09271523,  0.07213115,  0.07594937,        0.07260726,  0.0852459 ,  0.07627119,  0.07692308,  0.04968944,        0.05685619,  0.09003215,  0.05821918,  0.08098592,  0.07720588]), 10: np.array([ 0.008     ,  0.01145038,  0.02564103,  0.02105263,  0.01677852,        0.02194357,  0.03082192,  0.02058824,  0.021875  ,  0.01935484,        0.01215805,  0.01898734,  0.02229299,  0.02052786,  0.01337793,        0.01869159,  0.00677966,  0.01986755,  0.00983607,  0.00632911,        0.01320132,  0.00655738,  0.02259887,  0.00295858,  0.00931677,        0.02006689,  0.0096463 ,  0.00684932,  0.        ,  0.00367647]), 12: np.array([ 0.016     ,  0.02671756,  0.01465201,  0.01052632,  0.02348993,        0.02194357,  0.01369863,  0.01176471,  0.00625   ,  0.01612903,        0.01519757,  0.00632911,  0.01592357,  0.0058651 ,  0.00668896,        0.00311526,  0.00677966,  0.00331126,  0.00655738,  0.00316456,        0.00660066,  0.00655738,  0.00282486,  0.00295858,  0.00310559,        0.00334448,  0.        ,  0.        ,  0.        ,  0.        ]), -1: np.array([ 0.504     ,  0.36259542,  0.37362637,  0.32982456,  0.33892617,        0.29467085,  0.29109589,  0.19411765,  0.2125    ,  0.16129032,        0.14285714,  0.13924051,  0.11146497,  0.12316716,  0.1270903 ,        0.09345794,  0.08135593,  0.06953642,  0.07540984,  0.03797468,        0.02310231,  0.04590164,  0.04519774,  0.01775148,  0.03416149,        0.00668896,  0.02250804,  0.01369863,  0.00704225,  0.00735294])}]
likelihood_freq_COS=[{8: np.array([ 0.26341463,  0.30071599,  0.28571429,  0.28095238,  0.32325581,        0.36423841,  0.31121281,  0.36123348,  0.33673469,  0.34736842,        0.36386768,  0.39686684,  0.39379475,  0.37046005,  0.40526316,        0.408     ,  0.36363636,  0.42119565,  0.40409207,  0.43561644,        0.44141689,  0.46648045,  0.44034091,  0.45257453,  0.42120344,        0.41823899,  0.41741742,  0.47266881,  0.43809524,  0.4222973 ]), 12: np.array([ 0.06341463,  0.05966587,  0.06779661,  0.06428571,  0.07906977,        0.05298013,  0.0778032 ,  0.03524229,  0.06377551,  0.04631579,        0.04580153,  0.04699739,  0.05966587,  0.05569007,  0.03947368,        0.032     ,  0.02941176,  0.04076087,  0.04347826,  0.02739726,        0.02452316,  0.03631285,  0.01988636,  0.01626016,  0.02578797,        0.03459119,  0.01501502,  0.01607717,  0.01904762,  0.00675676]), 4: np.array([ 0.61463415,  0.5823389 ,  0.59564165,  0.60714286,  0.56046512,        0.54966887,  0.57437071,  0.55726872,  0.56122449,  0.57263158,        0.5648855 ,  0.51697128,  0.52505967,  0.5472155 ,  0.52894737,        0.54666667,  0.59358289,  0.52717391,  0.53964194,  0.51506849,        0.52861035,  0.48603352,  0.53977273,  0.52303523,  0.5530086 ,        0.5408805 ,  0.56756757,  0.50803859,  0.54285714,  0.57094595]), 16: np.array([ 0.03902439,  0.02147971,  0.02421308,  0.01666667,  0.03023256,        0.02207506,  0.01144165,  0.02202643,  0.02040816,  0.01263158,        0.01272265,  0.0156658 ,  0.01670644,  0.01452785,  0.01578947,        0.00533333,  0.01069519,  0.00543478,  0.01023018,  0.01917808,        0.        ,  0.01117318,  0.        ,  0.00542005,  0.        ,        0.00628931,  0.        ,  0.00321543,  0.        ,  0.        ]), 20: np.array([ 0.0195122 ,  0.03579952,  0.02663438,  0.03095238,  0.00697674,        0.01103753,  0.02517162,  0.02422907,  0.01785714,  0.02105263,        0.01272265,  0.02349869,  0.00477327,  0.01210654,  0.01052632,        0.008     ,  0.0026738 ,  0.00543478,  0.00255754,  0.00273973,        0.00544959,  0.        ,  0.        ,  0.00271003,  0.        ,        0.        ,  0.        ,  0.        ,  0.        ,  0.        ])}, {8: np.array([ 0.28455285,  0.27756654,  0.2599278 ,  0.35222672,  0.31632653,        0.23954373,  0.31487889,  0.25157233,  0.35109718,  0.35099338,        0.35185185,  0.33663366,  0.41254125,  0.39297125,  0.30967742,        0.39869281,  0.35151515,  0.37345679,  0.37898089,  0.35806452,        0.3707483 ,  0.32764505,  0.38746439,  0.3785489 ,  0.36      ,        0.36619718,  0.37762238,  0.35880399,  0.34756098,  0.36861314]), 12: np.array([ 0.19512195,  0.19771863,  0.28158845,  0.20647773,  0.27891156,        0.26235741,  0.23529412,  0.31761006,  0.26645768,  0.31456954,        0.35493827,  0.36963696,  0.30363036,  0.30351438,  0.38709677,        0.34640523,  0.36060606,  0.40740741,  0.35031847,  0.43870968,        0.43877551,  0.46075085,  0.43874644,  0.45425868,  0.44      ,        0.46478873,  0.45804196,  0.50830565,  0.4695122 ,  0.47810219]), 4: np.array([ 0.30894309,  0.30038023,  0.28158845,  0.2388664 ,  0.21768707,        0.26235741,  0.21453287,  0.20440252,  0.18808777,  0.13907285,        0.11728395,  0.08580858,  0.10561056,  0.11821086,  0.08387097,        0.06862745,  0.07878788,  0.07098765,  0.0477707 ,  0.0483871 ,        0.05782313,  0.04095563,  0.02564103,  0.04100946,  0.02461538,        0.02816901,  0.02097902,  0.02990033,  0.0152439 ,  0.02189781]), 16: np.array([ 0.08943089,  0.14448669,  0.09386282,  0.08502024,  0.09863946,        0.14828897,  0.12456747,  0.12893082,  0.13479624,  0.10927152,        0.10802469,  0.12211221,  0.11881188,  0.13099042,  0.12903226,        0.13071895,  0.14242424,  0.11111111,  0.14968153,  0.10967742,        0.09863946,  0.10921502,  0.11965812,  0.10725552,  0.14769231,        0.09507042,  0.12237762,  0.089701  ,  0.1402439 ,  0.10218978]), 20: np.array([ 0.12195122,  0.07984791,  0.08303249,  0.11740891,  0.08843537,        0.08745247,  0.11072664,  0.09748428,  0.05956113,  0.08609272,        0.06790123,  0.08580858,  0.05940594,  0.0543131 ,  0.09032258,        0.05555556,  0.06666667,  0.03703704,  0.07324841,  0.04516129,        0.03401361,  0.06143345,  0.02849003,  0.01892744,  0.02769231,        0.04577465,  0.02097902,  0.01328904,  0.02743902,  0.02919708])}, {8: np.array([ 0.16304348,  0.19689119,  0.20481928,  0.18134715,  0.16289593,        0.19459459,  0.14718615,  0.10504202,  0.14622642,  0.15450644,        0.14666667,  0.15613383,  0.13779528,  0.11439114,  0.09920635,        0.10679612,  0.16796875,  0.13253012,  0.13833992,  0.116     ,        0.07865169,  0.06910569,  0.09818182,  0.06229508,  0.08783784,        0.10384615,  0.06620209,  0.07876712,  0.08695652,  0.07612457]), 12: np.array([ 0.09782609,  0.20725389,  0.18674699,  0.1865285 ,  0.15837104,        0.23243243,  0.22943723,  0.22268908,  0.23584906,  0.20600858,        0.27111111,  0.26394052,  0.22834646,  0.27675277,  0.27380952,        0.2394822 ,  0.29296875,  0.27309237,  0.256917  ,  0.284     ,        0.32958801,  0.30894309,  0.28      ,  0.27213115,  0.27027027,        0.28846154,  0.29965157,  0.28082192,  0.28985507,  0.29065744]), 4: np.array([ 0.31521739,  0.24870466,  0.28915663,  0.20725389,  0.2081448 ,        0.16216216,  0.13852814,  0.14285714,  0.10849057,  0.10300429,        0.07555556,  0.06319703,  0.05905512,  0.09594096,  0.06746032,        0.04530744,  0.03125   ,  0.02008032,  0.04743083,  0.008     ,        0.01872659,  0.        ,  0.01454545,  0.00655738,  0.01351351,        0.00384615,  0.00348432,  0.01027397,  0.00724638,  0.00346021]), 16: np.array([ 0.16304348,  0.16580311,  0.15662651,  0.16062176,  0.19909502,        0.18918919,  0.22077922,  0.2605042 ,  0.24056604,  0.26180258,        0.22666667,  0.2527881 ,  0.31102362,  0.26937269,  0.26190476,        0.31391586,  0.22265625,  0.32128514,  0.3083004 ,  0.3       ,        0.2659176 ,  0.32113821,  0.31272727,  0.40655738,  0.38851351,        0.32307692,  0.40766551,  0.36643836,  0.36594203,  0.37370242]), 20: np.array([ 0.26086957,  0.18134715,  0.1626506 ,  0.2642487 ,  0.27149321,        0.22162162,  0.26406926,  0.26890756,  0.26886792,  0.27467811,        0.28      ,  0.26394052,  0.26377953,  0.24354244,  0.29761905,        0.29449838,  0.28515625,  0.25301205,  0.24901186,  0.292     ,        0.3071161 ,  0.30081301,  0.29454545,  0.25245902,  0.23986486,        0.28076923,  0.22299652,  0.26369863,  0.25      ,  0.25605536])}]
lognorm_params_given_inj_and_meas_COS=np.array([[[ 0.01390622,  0.38913859],        [-0.41854244,  0.38156512],        [-0.82051995,  0.41353315]],       [[ 0.45323169,  0.38993019],        [-0.22129673,  0.35769718],        [-0.60611337,  0.45493741]],       [[ 0.80835337,  0.37230007],        [-0.02573605,  0.35712501],        [-0.4109184 ,  0.35525277]],       [[ 0.97837598,  0.55088502],        [ 0.20401667,  0.41889404],        [-0.25177156,  0.44214373]],       [[ 1.00863311,  0.06387071],        [ 0.50079094,  0.46009133],        [ 0.01225333,  0.43557615]],       [[ 1.40135979,  0.00908024],        [ 0.54719904,  0.48638343],        [ 0.27595428,  0.5155994 ]]])


###########
#os.chdir('/data2/common/COdeep_cosmos/MFanalysis')
import sys
sys.path.append('/data2/common/COdeep_cosmos/MFanalysis')
import cand_class
inp=open('/data2/common/COdeep_cosmos/MFanalysis/reduint_nosmooth_combined_pos.dat')
reduint=cPickle.load(inp)
inp.close()

toremove=[0,4,5,9]
reduint=[red for idx,red in enumerate(reduint) if idx not in toremove]
objects_COS=[cand_class.line_candidate(red) for red in reduint if red[0]>5.25] 
#############
#os.chdir('/data2/common/goodsN/SNRanalysis_57w/MF3D')
import cand_class_GN

inp=open('/data2/common/goodsN/SNRanalysis_57w/MF3D/reduint_nosmooth_combined_pos.dat')
reduint=cPickle.load(inp)
inp.close()

toremove=[0]
reduint=[red for idx,red in enumerate(reduint) if idx not in toremove]
objects_GN=[cand_class_GN.line_candidate(red) for red in reduint if red[0]>5.5] 

objects_GN[2].fiducial_int_flux=objects_GN[2].aper_int_flux  #correct the flux of GN19 to be the aper flux
objects_GN[2].L_prime*=objects_GN[2].aper_int_flux/objects_GN[2].pix_int_flux  #correct the flux of GN19 to be the aper flux

##########################
L_prime_freq_conversion=np.load('L_prime_freq_conversion.npy')


#@profile
def check_one_value(params): # in prior_samples:
	logLstar,logPhiStar,alpha=params
	logLmin=8.5
	#distro=gamma(alpha,loc=0,scale=10**logLstar)   #this choice of alpha means that the LF form is NOT same as Mike's but rather has alpha in the exponent when written as dN/dV/dlogL
	vol_COS=20189.
	vol_GN=131042.
	normaliz=fp.gammainc(alpha,10**(logLmin-logLstar))
	Numexp_COS=10**(logPhiStar)*normaliz*vol_COS#*(1-distro.cdf(1e9))   #This is how many galaxies in volume vol, are expected on average
	Numexp_GN=10**(logPhiStar)*normaliz*vol_GN
	#plt.loglog(np.logspace(9,12,100),distro.pdf(np.logspace(9,12,100)))
	N_to_use_COS=poisson.rvs(Numexp_COS)
	N_to_use_GN=poisson.rvs(Numexp_GN)
	Lprimes_COS=simulate_schechter_distribution( alpha, 10**logLstar, 10**logLmin, N_to_use_COS) #distro.rvs(size=N_to_use_COS)
	Lprimes_GN=simulate_schechter_distribution( alpha, 10**logLstar, 10**logLmin, N_to_use_GN) #distro.rvs(size=N_to_use_GN)
	#while(np.any(Lprimes<1e9)):
	#	Lprimes=distro.rvs(size=N_to_use)
	freq_list_COS=31+8*np.random.random(N_to_use_COS)
	freq_list_GN=30+8*np.random.random(N_to_use_GN)
	sdv_list_COS=Lprimes_COS/L_prime_freq_conversion[((freq_list_COS-30)/9.0e-5).astype(int)]   
	sdv_list_GN=Lprimes_GN/L_prime_freq_conversion[((freq_list_GN-30)/9.0e-5).astype(int)]    
	#sdv_list_COS=np.array([Lprimes_COS[idx]/calc_L_prime(1,fre) for idx,fre in enumerate(freq_list_COS)])
	#sdv_list_GN=np.array([Lprimes_GN[idx]/calc_L_prime(1,fre) for idx,fre in enumerate(freq_list_GN)])
	spat_real_COS=np.random.choice(3, size=N_to_use_COS, replace=True, p=[0.88, 0.1, 0.02])
	freq_real_COS=np.random.choice(3, size=N_to_use_COS, replace=True, p=[0.34, 0.33, 0.33])
	spat_real_GN=np.random.choice(3, size=N_to_use_GN, replace=True, p=[0.88, 0.1, 0.02])
	freq_real_GN=np.random.choice(3, size=N_to_use_GN, replace=True, p=[0.34, 0.33, 0.33])
	compl_params_fit_COS=np.array([[[ 0.51093145,  0.02771134],[ 0.41731388,  0.03699222],[ 0.48504448,  0.04833295]],       [[ 0.52961387,  0.06536336],[ 0.47647305,  0.09091878],[ 0.43582843,  0.11752236]],       [[ 0.48816207,  0.1055706 ],[ 0.41942854,  0.15440935],        [ 0.43130629,  0.21278495]]])
	compl_params_fit_GN=np.array([[[ 0.30244889,  0.0647361 ],[ 0.19111455,  0.0863606 ],[ 0.26355572,  0.11940371]],       [[ 0.34815344,  0.11987698],       [ 0.3085827 ,  0.17502077],        [ 0.3268172 ,  0.23117797]],       [[ 0.37420752,  0.21330359],        [ 0.30220447,  0.30313399],        [ 0.29627785,  0.40176673]]])
	myfit=lambda f,d,f0: max(0,1-(   1./(f+d)*np.exp(-f/f0)   ))
	completenesses_COS=[myfit(sdv,*compl_params_fit_COS[spat,freq]) for sdv,spat,freq in zip(sdv_list_COS,spat_real_COS,freq_real_COS)]
	completenesses_GN=[myfit(sdv,*compl_params_fit_GN[spat,freq]) for sdv,spat,freq in zip(sdv_list_GN,spat_real_GN,freq_real_GN)]
	observed_COS=np.random.random(size=N_to_use_COS)<completenesses_COS
	Nobs_COS=np.sum(observed_COS)
	observed_GN=np.random.random(size=N_to_use_GN)<completenesses_GN
	Nobs_GN=np.sum(observed_GN)
	#now take care of the real candidates
	purities_COS=np.array([max(0,obj.purity*np.random.normal(loc=1.,scale=1.))  if obj.purity<1 else 1 for obj in objects_COS])
	purities_GN=np.array([max(0,obj.purity*np.random.normal(loc=1.,scale=1.))  if obj.purity<1 else 1 for obj in objects_GN])
	#purities_COS=np.array([np.random.random()*obj.purity if obj.purity<1 else 1 for obj in objects_COS ])
	#purities_GN=np.array([np.random.random()*obj.purity if obj.purity<1 else 1 for obj in objects_GN ])
	selected_candidates_COS=np.random.random(size=len(objects_COS))<purities_COS
	Nselected_COS=np.sum(selected_candidates_COS)
	selected_candidates_GN=np.random.random(size=len(objects_GN))<purities_GN
	Nselected_GN=np.sum(selected_candidates_GN)
	#print N_to_use_COS,N_to_use_GN,Nobs_COS,Nobs_GN,'real:',Nselected_COS,Nselected_GN
	if np.absolute(Nselected_COS-Nobs_COS)<=1 and np.absolute(Nselected_GN-Nobs_GN)<=1 and Nobs_GN>0:
		#print 'Match!'
		Lprime_observed_real_COS=np.array([obj.L_prime  for  idx,obj in enumerate(objects_COS)  if selected_candidates_COS[idx]  ])
		Lprime_observed_real_GN=np.array([obj.L_prime  for  idx,obj in enumerate(objects_GN)  if selected_candidates_GN[idx]  ])
		SNRbins=np.arange(4,7,.1)
		SNRbin_idx=np.digitize(5.5,SNRbins)-1   #I set this to 5.5
		observed_Lprime_COS=[]
		for idx in range(Nobs_COS):
			inj_spa_COS=spat_real_COS[observed_COS][idx]
			#inj_fre=freq_real[observed][idx]
			spat_distrib_COS=[np.mean([likelihood_COS[inj_spa_COS][key][SNR_b]  for SNR_b in range(SNRbin_idx-3,SNRbin_idx+3)]) for  key in [-1,0,2,4,6,8,10,12]]
			spat_obs_idx_COS=min(5,np.random.choice(8, size=1, replace=True, p=spat_distrib_COS)[0])
			spat_obs_COS=[-1,0,2,4,6,8][spat_obs_idx_COS]
			#freq_distrib=[np.mean([likelihood_freq[inj_fre][key][SNR_b]  for SNR_b in range(SNRbin_idx-3,SNRbin_idx+3)]) for  key in [4,8,12,16,20]]
			#freq_obs=[4,8,12,16,20][np.random.choice(5, size=1, replace=True, p=freq_distrib)[0]]
			#for the given intrinsic and observed properties, and the SNR=5.5, what flux ratio do we expect?
			lognorm_par_COS=lognorm_params_given_inj_and_meas_COS[spat_obs_idx_COS,inj_spa_COS]
			from scipy.stats import lognorm
			flux_correct_COS=lognorm(s=lognorm_par_COS[1],scale=np.exp(lognorm_par_COS[0])).rvs()
			observed_flux_COS=sdv_list_COS[observed_COS][idx]*flux_correct_COS	
			observed_Lprime_COS.append(Lprimes_COS[observed_COS][idx]*flux_correct_COS)
		observed_Lprime_GN=[]
		for idx in range(Nobs_GN):
			inj_spa_GN=spat_real_GN[observed_GN][idx]
			#inj_fre=freq_real[observed][idx]
			spat_distrib_GN=[np.mean([likelihood_GN[inj_spa_GN][key][SNR_b]  for SNR_b in range(SNRbin_idx-3,SNRbin_idx+3)]) for  key in [-1,0,2,4,6,8,10]]
			spat_obs_idx_GN=min(5,np.random.choice(7, size=1, replace=True, p=spat_distrib_GN)[0])
			spat_obs_GN=[-1,0,2,4,6,8][spat_obs_idx_GN]
			#freq_distrib=[np.mean([likelihood_freq[inj_fre][key][SNR_b]  for SNR_b in range(SNRbin_idx-3,SNRbin_idx+3)]) for  key in [4,8,12,16,20]]
			#freq_obs=[4,8,12,16,20][np.random.choice(5, size=1, replace=True, p=freq_distrib)[0]]
			#for the given intrinsic and observed properties, and the SNR=5.5, what flux ratio do we expect?
			lognorm_par_GN=lognorm_params_given_inj_and_meas_GN[spat_obs_idx_GN,inj_spa_GN]
			from scipy.stats import lognorm
			flux_correct_GN=lognorm(s=lognorm_par_GN[1],scale=np.exp(lognorm_par_GN[0])).rvs()
			observed_flux_GN=sdv_list_GN[observed_GN][idx]*flux_correct_GN
			observed_Lprime_GN.append(Lprimes_GN[observed_GN][idx]*flux_correct_GN)
		allmatched=True
		for obs_real_Lprime in Lprime_observed_real_COS:
			if np.min(np.absolute(obs_real_Lprime-np.array(observed_Lprime_COS))/obs_real_Lprime)>.2:
				#print np.min(np.absolute(obs_real_Lprime-np.array(observed_Lprime_COS))/obs_real_Lprime)
				allmatched=False
		for obs_real_Lprime in Lprime_observed_real_GN:
			if np.min(np.absolute(obs_real_Lprime-np.array(observed_Lprime_GN))/obs_real_Lprime)>.2:
				#print np.min(np.absolute(obs_real_Lprime-np.array(observed_Lprime_GN))/obs_real_Lprime)
				allmatched=False
		if allmatched:
			#print 'amazing this works!'#,'real:',Lprime_observed_real,'simul:',observed_Lprime
			return params



#Nsamp=1000
#prior_samples=np.array(zip(np.random.random(size=Nsamp)*2+9.5,np.random.random(size=Nsamp)*2.5-5,np.random.random(size=Nsamp)*2.-.9 ))
#for sam in prior_samples:
#		print check_one_value(sam)



Nsamp=100000

from multiprocessing import Pool

p = Pool(30)

samples=list(np.loadtxt('mysamples'))

toexit=True
while (toexit):
	#logLstar,logPhiStar,alpha
	prior_samples=np.array(zip(np.random.random(size=Nsamp)*2+9.5,np.random.random(size=Nsamp)*2.5-5,np.random.random(size=Nsamp)*2.-.9 ))
	#try:
	samples+=[x for x in  p.map(check_one_value,prior_samples) if x is not None]
	#except ValueError:  #raised if `y` is empty.
	#	pass
	np.savetxt('mysamples',samples)
	#toexit=False



#9124
'''
samp=np.loadtxt('mysamples')
samp.shape
import corner
corner.corner(samp,labels=['Lprime','Phiprime','alpha'])
'''




